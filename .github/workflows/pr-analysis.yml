name: PR Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger analysis
        id: trigger
        run: |
          # Use GitHub context variables directly
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Debug information
          echo "Repository owner: $REPO_OWNER"
          echo "Repository name: $REPO_NAME"
          echo "PR number: $PR_NUMBER"
          
          # Make the initial API call with explicit error output
          echo "Making API call to: https://8z9ssbamdj.execute-api.us-west-2.amazonaws.com/prod/${REPO_OWNER}/${REPO_NAME}/pull/${PR_NUMBER}"
          RESPONSE=$(curl -s -X POST \
            "https://8z9ssbamdj.execute-api.us-west-2.amazonaws.com/prod/${REPO_OWNER}/${REPO_NAME}/pull/${PR_NUMBER}" \
            -H "Content-Type: application/json" \
            -d '{"aiAnalysisEnabled": true}' \
            --fail-with-body || echo '{"error": "API call failed"}')
            
          # Print the full response for debugging
          echo "Raw API response: $RESPONSE"
          
          # Check if response contains an error
          if [[ "$(echo $RESPONSE | jq 'has("error")')" == "true" ]]; then
            echo "Error in API response. Exiting."
            exit 1
          fi
          
          # Extract the request_id and status_url with error checking
          REQUEST_ID=$(echo $RESPONSE | jq -r '.request_id // "missing_request_id"')
          STATUS_URL=$(echo $RESPONSE | jq -r '.status_url // "missing_status_url"')
          
          # Validate extracted values
          if [[ "$REQUEST_ID" == "missing_request_id" || "$REQUEST_ID" == "null" ]]; then
            echo "Failed to extract request_id from response"
            exit 1
          fi
          
          if [[ "$STATUS_URL" == "missing_status_url" || "$STATUS_URL" == "null" ]]; then
            echo "Failed to extract status_url from response"
            exit 1
          fi
          
          # Save these values to environment variables for the next step
          echo "REQUEST_ID=$REQUEST_ID" >> $GITHUB_ENV
          echo "STATUS_URL=$STATUS_URL" >> $GITHUB_ENV
          
          echo "Triggered analysis with request ID: $REQUEST_ID"
          echo "Status URL: $STATUS_URL"

      - name: Poll for completion
        id: poll
        run: |
          STATUS_URL="${{ env.STATUS_URL }}"
          MAX_ATTEMPTS=60  # Maximum number of polling attempts (5 min at 5s intervals)
          ATTEMPT=0
          
          echo "Polling $STATUS_URL for completion..."
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            RESPONSE=$(curl -s -X GET "$STATUS_URL")
            STATUS=$(echo $RESPONSE | jq -r '.status')
            STAGE=$(echo $RESPONSE | jq -r '.current_stage')
            
            echo "Current status: $STATUS, Stage: $STAGE ($ATTEMPT/$MAX_ATTEMPTS)"
            
            # Check if we have the haystack_server_url and stage is Finished
            if [[ "$(echo $RESPONSE | jq 'has("haystack_server_url")')" == "true" ]] && [[ "$STAGE" == "Finished" ]]; then
              HAYSTACK_URL=$(echo $RESPONSE | jq -r '.haystack_server_url')
              echo "HAYSTACK_URL=$HAYSTACK_URL" >> $GITHUB_ENV
              echo "Analysis complete! Haystack URL: $HAYSTACK_URL"
              break
            fi
            
            # If failed, exit the loop
            if [[ "$STATUS" == "failed" ]]; then
              echo "Analysis failed in stage: $STAGE"
              exit 1
            fi
            
            # Wait before next poll
            sleep 5
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
            echo "Timed out waiting for analysis to complete"
            exit 1
          fi

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const haystack_url = process.env.HAYSTACK_URL;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## üîç PR Analysis Complete!
              
              Your PR has been analyzed and is available for viewing:
              
              **[View Analysis Results](${haystack_url})**
              
              This link provides an enhanced view of your PR with additional insights.`
            })
